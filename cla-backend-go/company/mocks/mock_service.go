// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: company/service.go

// Package mock_company is a generated GoMock package.
package mock_company

import (
	context "context"
	reflect "reflect"

	company "github.com/linuxfoundation/easycla/cla-backend-go/company"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddPendingCompanyInviteRequest mocks base method.
func (m *MockIService) AddPendingCompanyInviteRequest(ctx context.Context, companyID, userID string) (*company.InviteModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPendingCompanyInviteRequest", ctx, companyID, userID)
	ret0, _ := ret[0].(*company.InviteModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPendingCompanyInviteRequest indicates an expected call of AddPendingCompanyInviteRequest.
func (mr *MockIServiceMockRecorder) AddPendingCompanyInviteRequest(ctx, companyID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingCompanyInviteRequest", reflect.TypeOf((*MockIService)(nil).AddPendingCompanyInviteRequest), ctx, companyID, userID)
}

// AddUserToCompanyAccessList mocks base method.
func (m *MockIService) AddUserToCompanyAccessList(ctx context.Context, companyID, lfid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToCompanyAccessList", ctx, companyID, lfid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToCompanyAccessList indicates an expected call of AddUserToCompanyAccessList.
func (mr *MockIServiceMockRecorder) AddUserToCompanyAccessList(ctx, companyID, lfid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToCompanyAccessList", reflect.TypeOf((*MockIService)(nil).AddUserToCompanyAccessList), ctx, companyID, lfid)
}

// ApproveCompanyAccessRequest mocks base method.
func (m *MockIService) ApproveCompanyAccessRequest(ctx context.Context, companyInviteID string) (*company.InviteModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveCompanyAccessRequest", ctx, companyInviteID)
	ret0, _ := ret[0].(*company.InviteModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveCompanyAccessRequest indicates an expected call of ApproveCompanyAccessRequest.
func (mr *MockIServiceMockRecorder) ApproveCompanyAccessRequest(ctx, companyInviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveCompanyAccessRequest", reflect.TypeOf((*MockIService)(nil).ApproveCompanyAccessRequest), ctx, companyInviteID)
}

// CreateOrgFromExternalID mocks base method.
func (m *MockIService) CreateOrgFromExternalID(ctx context.Context, signingEntityName, companySFID string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgFromExternalID", ctx, signingEntityName, companySFID)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrgFromExternalID indicates an expected call of CreateOrgFromExternalID.
func (mr *MockIServiceMockRecorder) CreateOrgFromExternalID(ctx, signingEntityName, companySFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgFromExternalID", reflect.TypeOf((*MockIService)(nil).CreateOrgFromExternalID), ctx, signingEntityName, companySFID)
}

// GetCompanies mocks base method.
func (m *MockIService) GetCompanies(ctx context.Context) (*models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanies", ctx)
	ret0, _ := ret[0].(*models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanies indicates an expected call of GetCompanies.
func (mr *MockIServiceMockRecorder) GetCompanies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanies", reflect.TypeOf((*MockIService)(nil).GetCompanies), ctx)
}

// GetCompaniesByExternalID mocks base method.
func (m *MockIService) GetCompaniesByExternalID(ctx context.Context, companySFID string, includeChildCompanies bool) ([]*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByExternalID", ctx, companySFID, includeChildCompanies)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByExternalID indicates an expected call of GetCompaniesByExternalID.
func (mr *MockIServiceMockRecorder) GetCompaniesByExternalID(ctx, companySFID, includeChildCompanies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByExternalID", reflect.TypeOf((*MockIService)(nil).GetCompaniesByExternalID), ctx, companySFID, includeChildCompanies)
}

// GetCompaniesByUserManager mocks base method.
func (m *MockIService) GetCompaniesByUserManager(ctx context.Context, userID string) (*models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByUserManager", ctx, userID)
	ret0, _ := ret[0].(*models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByUserManager indicates an expected call of GetCompaniesByUserManager.
func (mr *MockIServiceMockRecorder) GetCompaniesByUserManager(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByUserManager", reflect.TypeOf((*MockIService)(nil).GetCompaniesByUserManager), ctx, userID)
}

// GetCompaniesByUserManagerWithInvites mocks base method.
func (m *MockIService) GetCompaniesByUserManagerWithInvites(ctx context.Context, userID string) (*models.CompaniesWithInvites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByUserManagerWithInvites", ctx, userID)
	ret0, _ := ret[0].(*models.CompaniesWithInvites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByUserManagerWithInvites indicates an expected call of GetCompaniesByUserManagerWithInvites.
func (mr *MockIServiceMockRecorder) GetCompaniesByUserManagerWithInvites(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByUserManagerWithInvites", reflect.TypeOf((*MockIService)(nil).GetCompaniesByUserManagerWithInvites), ctx, userID)
}

// GetCompany mocks base method.
func (m *MockIService) GetCompany(ctx context.Context, companyID string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", ctx, companyID)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockIServiceMockRecorder) GetCompany(ctx, companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockIService)(nil).GetCompany), ctx, companyID)
}

// GetCompanyByExternalID mocks base method.
func (m *MockIService) GetCompanyByExternalID(ctx context.Context, companySFID string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByExternalID", ctx, companySFID)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByExternalID indicates an expected call of GetCompanyByExternalID.
func (mr *MockIServiceMockRecorder) GetCompanyByExternalID(ctx, companySFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByExternalID", reflect.TypeOf((*MockIService)(nil).GetCompanyByExternalID), ctx, companySFID)
}

// GetCompanyBySigningEntityName mocks base method.
func (m *MockIService) GetCompanyBySigningEntityName(ctx context.Context, signingEntityName, companySFID string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyBySigningEntityName", ctx, signingEntityName, companySFID)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyBySigningEntityName indicates an expected call of GetCompanyBySigningEntityName.
func (mr *MockIServiceMockRecorder) GetCompanyBySigningEntityName(ctx, signingEntityName, companySFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyBySigningEntityName", reflect.TypeOf((*MockIService)(nil).GetCompanyBySigningEntityName), ctx, signingEntityName, companySFID)
}

// GetCompanyInviteRequests mocks base method.
func (m *MockIService) GetCompanyInviteRequests(ctx context.Context, companyID string, status *string) ([]models.CompanyInviteUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyInviteRequests", ctx, companyID, status)
	ret0, _ := ret[0].([]models.CompanyInviteUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyInviteRequests indicates an expected call of GetCompanyInviteRequests.
func (mr *MockIServiceMockRecorder) GetCompanyInviteRequests(ctx, companyID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyInviteRequests", reflect.TypeOf((*MockIService)(nil).GetCompanyInviteRequests), ctx, companyID, status)
}

// GetCompanyUserInviteRequests mocks base method.
func (m *MockIService) GetCompanyUserInviteRequests(ctx context.Context, companyID, userID string) (*models.CompanyInviteUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserInviteRequests", ctx, companyID, userID)
	ret0, _ := ret[0].(*models.CompanyInviteUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyUserInviteRequests indicates an expected call of GetCompanyUserInviteRequests.
func (mr *MockIServiceMockRecorder) GetCompanyUserInviteRequests(ctx, companyID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserInviteRequests", reflect.TypeOf((*MockIService)(nil).GetCompanyUserInviteRequests), ctx, companyID, userID)
}

// IsCCLAEnabledForCompany mocks base method.
func (m *MockIService) IsCCLAEnabledForCompany(ctx context.Context, companySFID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCCLAEnabledForCompany", ctx, companySFID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCCLAEnabledForCompany indicates an expected call of IsCCLAEnabledForCompany.
func (mr *MockIServiceMockRecorder) IsCCLAEnabledForCompany(ctx, companySFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCCLAEnabledForCompany", reflect.TypeOf((*MockIService)(nil).IsCCLAEnabledForCompany), ctx, companySFID)
}

// RejectCompanyAccessRequest mocks base method.
func (m *MockIService) RejectCompanyAccessRequest(ctx context.Context, companyInviteID string) (*company.InviteModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectCompanyAccessRequest", ctx, companyInviteID)
	ret0, _ := ret[0].(*company.InviteModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectCompanyAccessRequest indicates an expected call of RejectCompanyAccessRequest.
func (mr *MockIServiceMockRecorder) RejectCompanyAccessRequest(ctx, companyInviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectCompanyAccessRequest", reflect.TypeOf((*MockIService)(nil).RejectCompanyAccessRequest), ctx, companyInviteID)
}

// SearchCompanyByName mocks base method.
func (m *MockIService) SearchCompanyByName(ctx context.Context, companyName, nextKey string) (*models.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCompanyByName", ctx, companyName, nextKey)
	ret0, _ := ret[0].(*models.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCompanyByName indicates an expected call of SearchCompanyByName.
func (mr *MockIServiceMockRecorder) SearchCompanyByName(ctx, companyName, nextKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCompanyByName", reflect.TypeOf((*MockIService)(nil).SearchCompanyByName), ctx, companyName, nextKey)
}

// SearchOrganizationByName mocks base method.
func (m *MockIService) SearchOrganizationByName(ctx context.Context, orgName, websiteName string, includeSigningEntityName bool, filter string) (*models.OrgList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganizationByName", ctx, orgName, websiteName, includeSigningEntityName, filter)
	ret0, _ := ret[0].(*models.OrgList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrganizationByName indicates an expected call of SearchOrganizationByName.
func (mr *MockIServiceMockRecorder) SearchOrganizationByName(ctx, orgName, websiteName, includeSigningEntityName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizationByName", reflect.TypeOf((*MockIService)(nil).SearchOrganizationByName), ctx, orgName, websiteName, includeSigningEntityName, filter)
}

// getPreferredNameAndEmail mocks base method.
func (m *MockIService) getPreferredNameAndEmail(ctx context.Context, lfid string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPreferredNameAndEmail", ctx, lfid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getPreferredNameAndEmail indicates an expected call of getPreferredNameAndEmail.
func (mr *MockIServiceMockRecorder) getPreferredNameAndEmail(ctx, lfid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPreferredNameAndEmail", reflect.TypeOf((*MockIService)(nil).getPreferredNameAndEmail), ctx, lfid)
}

// sendRequestAccessEmail mocks base method.
func (m *MockIService) sendRequestAccessEmail(ctx context.Context, companyModel *models.Company, requesterName, requesterEmail, recipientName, recipientAddress string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "sendRequestAccessEmail", ctx, companyModel, requesterName, requesterEmail, recipientName, recipientAddress)
}

// sendRequestAccessEmail indicates an expected call of sendRequestAccessEmail.
func (mr *MockIServiceMockRecorder) sendRequestAccessEmail(ctx, companyModel, requesterName, requesterEmail, recipientName, recipientAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendRequestAccessEmail", reflect.TypeOf((*MockIService)(nil).sendRequestAccessEmail), ctx, companyModel, requesterName, requesterEmail, recipientName, recipientAddress)
}

// sendRequestApprovedEmailToRecipient mocks base method.
func (m *MockIService) sendRequestApprovedEmailToRecipient(ctx context.Context, companyModel *models.Company, recipientName, recipientAddress string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "sendRequestApprovedEmailToRecipient", ctx, companyModel, recipientName, recipientAddress)
}

// sendRequestApprovedEmailToRecipient indicates an expected call of sendRequestApprovedEmailToRecipient.
func (mr *MockIServiceMockRecorder) sendRequestApprovedEmailToRecipient(ctx, companyModel, recipientName, recipientAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendRequestApprovedEmailToRecipient", reflect.TypeOf((*MockIService)(nil).sendRequestApprovedEmailToRecipient), ctx, companyModel, recipientName, recipientAddress)
}

// sendRequestRejectedEmailToRecipient mocks base method.
func (m *MockIService) sendRequestRejectedEmailToRecipient(ctx context.Context, companyModel *models.Company, recipientName, recipientAddress string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "sendRequestRejectedEmailToRecipient", ctx, companyModel, recipientName, recipientAddress)
}

// sendRequestRejectedEmailToRecipient indicates an expected call of sendRequestRejectedEmailToRecipient.
func (mr *MockIServiceMockRecorder) sendRequestRejectedEmailToRecipient(ctx, companyModel, recipientName, recipientAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendRequestRejectedEmailToRecipient", reflect.TypeOf((*MockIService)(nil).sendRequestRejectedEmailToRecipient), ctx, companyModel, recipientName, recipientAddress)
}
