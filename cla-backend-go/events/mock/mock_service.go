// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

// Code generated by MockGen. DO NOT EDIT.
// Source: events/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	events "github.com/linuxfoundation/easycla/cla-backend-go/events"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	events0 "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/restapi/operations/events"
	projects_cla_groups "github.com/linuxfoundation/easycla/cla-backend-go/projects_cla_groups"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetClaGroupEvents mocks base method.
func (m *MockService) GetClaGroupEvents(claGroupID string, nextKey *string, paramPageSize *int64, all bool, searchTerm *string) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupEvents", claGroupID, nextKey, paramPageSize, all, searchTerm)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupEvents indicates an expected call of GetClaGroupEvents.
func (mr *MockServiceMockRecorder) GetClaGroupEvents(claGroupID, nextKey, paramPageSize, all, searchTerm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupEvents", reflect.TypeOf((*MockService)(nil).GetClaGroupEvents), claGroupID, nextKey, paramPageSize, all, searchTerm)
}

// GetCompanyClaGroupEvents mocks base method.
func (m *MockService) GetCompanyClaGroupEvents(claGroupID, companySFID string, nextKey *string, paramPageSize *int64, searchTerm *string, all bool) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyClaGroupEvents", claGroupID, companySFID, nextKey, paramPageSize, searchTerm, all)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyClaGroupEvents indicates an expected call of GetCompanyClaGroupEvents.
func (mr *MockServiceMockRecorder) GetCompanyClaGroupEvents(claGroupID, companySFID, nextKey, paramPageSize, searchTerm, all interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyClaGroupEvents", reflect.TypeOf((*MockService)(nil).GetCompanyClaGroupEvents), claGroupID, companySFID, nextKey, paramPageSize, searchTerm, all)
}

// GetCompanyEvents mocks base method.
func (m *MockService) GetCompanyEvents(companyID, eventType string, nextKey *string, paramPageSize *int64, all bool) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyEvents", companyID, eventType, nextKey, paramPageSize, all)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyEvents indicates an expected call of GetCompanyEvents.
func (mr *MockServiceMockRecorder) GetCompanyEvents(companyID, eventType, nextKey, paramPageSize, all interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyEvents", reflect.TypeOf((*MockService)(nil).GetCompanyEvents), companyID, eventType, nextKey, paramPageSize, all)
}

// GetCompanyFoundationEvents mocks base method.
func (m *MockService) GetCompanyFoundationEvents(companySFID, companyID, foundationSFID string, nextKey *string, paramPageSize *int64, searchTerm *string, all bool) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyFoundationEvents", companySFID, companyID, foundationSFID, nextKey, paramPageSize, searchTerm, all)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyFoundationEvents indicates an expected call of GetCompanyFoundationEvents.
func (mr *MockServiceMockRecorder) GetCompanyFoundationEvents(companySFID, companyID, foundationSFID, nextKey, paramPageSize, searchTerm, all interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyFoundationEvents", reflect.TypeOf((*MockService)(nil).GetCompanyFoundationEvents), companySFID, companyID, foundationSFID, nextKey, paramPageSize, searchTerm, all)
}

// GetFoundationEvents mocks base method.
func (m *MockService) GetFoundationEvents(foundationSFID string, nextKey *string, paramPageSize *int64, all bool, searchTerm *string) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoundationEvents", foundationSFID, nextKey, paramPageSize, all, searchTerm)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoundationEvents indicates an expected call of GetFoundationEvents.
func (mr *MockServiceMockRecorder) GetFoundationEvents(foundationSFID, nextKey, paramPageSize, all, searchTerm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoundationEvents", reflect.TypeOf((*MockService)(nil).GetFoundationEvents), foundationSFID, nextKey, paramPageSize, all, searchTerm)
}

// GetRecentEvents mocks base method.
func (m *MockService) GetRecentEvents(paramPageSize *int64) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentEvents", paramPageSize)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentEvents indicates an expected call of GetRecentEvents.
func (mr *MockServiceMockRecorder) GetRecentEvents(paramPageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentEvents", reflect.TypeOf((*MockService)(nil).GetRecentEvents), paramPageSize)
}

// LogEvent mocks base method.
func (m *MockService) LogEvent(args *events.LogEventArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogEvent", args)
}

// LogEvent indicates an expected call of LogEvent.
func (mr *MockServiceMockRecorder) LogEvent(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEvent", reflect.TypeOf((*MockService)(nil).LogEvent), args)
}

// LogEventWithContext mocks base method.
func (m *MockService) LogEventWithContext(ctx context.Context, args *events.LogEventArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogEventWithContext", ctx, args)
}

// LogEventWithContext indicates an expected call of LogEventWithContext.
func (mr *MockServiceMockRecorder) LogEventWithContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogEventWithContext", reflect.TypeOf((*MockService)(nil).LogEventWithContext), ctx, args)
}

// SearchEvents mocks base method.
func (m *MockService) SearchEvents(params *events0.SearchEventsParams) (*models.EventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", params)
	ret0, _ := ret[0].(*models.EventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockServiceMockRecorder) SearchEvents(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockService)(nil).SearchEvents), params)
}

// MockCombinedRepo is a mock of CombinedRepo interface.
type MockCombinedRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCombinedRepoMockRecorder
}

// MockCombinedRepoMockRecorder is the mock recorder for MockCombinedRepo.
type MockCombinedRepoMockRecorder struct {
	mock *MockCombinedRepo
}

// NewMockCombinedRepo creates a new mock instance.
func NewMockCombinedRepo(ctrl *gomock.Controller) *MockCombinedRepo {
	mock := &MockCombinedRepo{ctrl: ctrl}
	mock.recorder = &MockCombinedRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCombinedRepo) EXPECT() *MockCombinedRepoMockRecorder {
	return m.recorder
}

// GetCLAGroupByID mocks base method.
func (m *MockCombinedRepo) GetCLAGroupByID(ctx context.Context, claGroupID string, loadRepoDetails bool) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroupByID", ctx, claGroupID, loadRepoDetails)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroupByID indicates an expected call of GetCLAGroupByID.
func (mr *MockCombinedRepoMockRecorder) GetCLAGroupByID(ctx, claGroupID, loadRepoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroupByID", reflect.TypeOf((*MockCombinedRepo)(nil).GetCLAGroupByID), ctx, claGroupID, loadRepoDetails)
}

// GetClaGroupIDForProject mocks base method.
func (m *MockCombinedRepo) GetClaGroupIDForProject(ctx context.Context, projectSFID string) (*projects_cla_groups.ProjectClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupIDForProject", ctx, projectSFID)
	ret0, _ := ret[0].(*projects_cla_groups.ProjectClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupIDForProject indicates an expected call of GetClaGroupIDForProject.
func (mr *MockCombinedRepoMockRecorder) GetClaGroupIDForProject(ctx, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupIDForProject", reflect.TypeOf((*MockCombinedRepo)(nil).GetClaGroupIDForProject), ctx, projectSFID)
}

// GetCompany mocks base method.
func (m *MockCombinedRepo) GetCompany(ctx context.Context, companyID string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", ctx, companyID)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockCombinedRepoMockRecorder) GetCompany(ctx, companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockCombinedRepo)(nil).GetCompany), ctx, companyID)
}

// GetUser mocks base method.
func (m *MockCombinedRepo) GetUser(userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCombinedRepoMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCombinedRepo)(nil).GetUser), userID)
}

// GetUserByUserName mocks base method.
func (m *MockCombinedRepo) GetUserByUserName(userName string, fullMatch bool) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserName", userName, fullMatch)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserName indicates an expected call of GetUserByUserName.
func (mr *MockCombinedRepoMockRecorder) GetUserByUserName(userName, fullMatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserName", reflect.TypeOf((*MockCombinedRepo)(nil).GetUserByUserName), userName, fullMatch)
}
