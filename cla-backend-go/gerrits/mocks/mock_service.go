// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: gerrits/service.go

// Package mock_gerrits is a generated GoMock package.
package mock_gerrits

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddGerrit mocks base method.
func (m *MockService) AddGerrit(ctx context.Context, claGroupID, projectSFID string, input *models.AddGerritInput, claGroupModel *models.ClaGroup) (*models.Gerrit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGerrit", ctx, claGroupID, projectSFID, input, claGroupModel)
	ret0, _ := ret[0].(*models.Gerrit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGerrit indicates an expected call of AddGerrit.
func (mr *MockServiceMockRecorder) AddGerrit(ctx, claGroupID, projectSFID, input, claGroupModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGerrit", reflect.TypeOf((*MockService)(nil).AddGerrit), ctx, claGroupID, projectSFID, input, claGroupModel)
}

// DeleteClaGroupGerrits mocks base method.
func (m *MockService) DeleteClaGroupGerrits(ctx context.Context, claGroupID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClaGroupGerrits", ctx, claGroupID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClaGroupGerrits indicates an expected call of DeleteClaGroupGerrits.
func (mr *MockServiceMockRecorder) DeleteClaGroupGerrits(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClaGroupGerrits", reflect.TypeOf((*MockService)(nil).DeleteClaGroupGerrits), ctx, claGroupID)
}

// DeleteGerrit mocks base method.
func (m *MockService) DeleteGerrit(ctx context.Context, gerritID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGerrit", ctx, gerritID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGerrit indicates an expected call of DeleteGerrit.
func (mr *MockServiceMockRecorder) DeleteGerrit(ctx, gerritID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGerrit", reflect.TypeOf((*MockService)(nil).DeleteGerrit), ctx, gerritID)
}

// GetClaGroupGerrits mocks base method.
func (m *MockService) GetClaGroupGerrits(ctx context.Context, claGroupID string) (*models.GerritList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupGerrits", ctx, claGroupID)
	ret0, _ := ret[0].(*models.GerritList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupGerrits indicates an expected call of GetClaGroupGerrits.
func (mr *MockServiceMockRecorder) GetClaGroupGerrits(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupGerrits", reflect.TypeOf((*MockService)(nil).GetClaGroupGerrits), ctx, claGroupID)
}

// GetGerrit mocks base method.
func (m *MockService) GetGerrit(ctx context.Context, gerritID string) (*models.Gerrit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerrit", ctx, gerritID)
	ret0, _ := ret[0].(*models.Gerrit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerrit indicates an expected call of GetGerrit.
func (mr *MockServiceMockRecorder) GetGerrit(ctx, gerritID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerrit", reflect.TypeOf((*MockService)(nil).GetGerrit), ctx, gerritID)
}

// GetGerritRepos mocks base method.
func (m *MockService) GetGerritRepos(ctx context.Context, gerritName string) (*models.GerritRepoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerritRepos", ctx, gerritName)
	ret0, _ := ret[0].(*models.GerritRepoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerritRepos indicates an expected call of GetGerritRepos.
func (mr *MockServiceMockRecorder) GetGerritRepos(ctx, gerritName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerritRepos", reflect.TypeOf((*MockService)(nil).GetGerritRepos), ctx, gerritName)
}

// GetGerritsByProjectSFID mocks base method.
func (m *MockService) GetGerritsByProjectSFID(ctx context.Context, projectSFID string) (*models.GerritList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerritsByProjectSFID", ctx, projectSFID)
	ret0, _ := ret[0].(*models.GerritList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerritsByProjectSFID indicates an expected call of GetGerritsByProjectSFID.
func (mr *MockServiceMockRecorder) GetGerritsByProjectSFID(ctx, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerritsByProjectSFID", reflect.TypeOf((*MockService)(nil).GetGerritsByProjectSFID), ctx, projectSFID)
}
