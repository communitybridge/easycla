// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: gerrits/repository.go

// Package mock_gerrits is a generated GoMock package.
package mock_gerrits

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddGerrit mocks base method.
func (m *MockRepository) AddGerrit(ctx context.Context, input *models.Gerrit) (*models.Gerrit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGerrit", ctx, input)
	ret0, _ := ret[0].(*models.Gerrit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGerrit indicates an expected call of AddGerrit.
func (mr *MockRepositoryMockRecorder) AddGerrit(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGerrit", reflect.TypeOf((*MockRepository)(nil).AddGerrit), ctx, input)
}

// DeleteGerrit mocks base method.
func (m *MockRepository) DeleteGerrit(ctx context.Context, gerritID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGerrit", ctx, gerritID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGerrit indicates an expected call of DeleteGerrit.
func (mr *MockRepositoryMockRecorder) DeleteGerrit(ctx, gerritID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGerrit", reflect.TypeOf((*MockRepository)(nil).DeleteGerrit), ctx, gerritID)
}

// ExistsByName mocks base method.
func (m *MockRepository) ExistsByName(ctx context.Context, gerritName string) ([]*models.Gerrit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByName", ctx, gerritName)
	ret0, _ := ret[0].([]*models.Gerrit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByName indicates an expected call of ExistsByName.
func (mr *MockRepositoryMockRecorder) ExistsByName(ctx, gerritName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByName", reflect.TypeOf((*MockRepository)(nil).ExistsByName), ctx, gerritName)
}

// GetClaGroupGerrits mocks base method.
func (m *MockRepository) GetClaGroupGerrits(ctx context.Context, claGroupID string) (*models.GerritList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupGerrits", ctx, claGroupID)
	ret0, _ := ret[0].(*models.GerritList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupGerrits indicates an expected call of GetClaGroupGerrits.
func (mr *MockRepositoryMockRecorder) GetClaGroupGerrits(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupGerrits", reflect.TypeOf((*MockRepository)(nil).GetClaGroupGerrits), ctx, claGroupID)
}

// GetGerrit mocks base method.
func (m *MockRepository) GetGerrit(ctx context.Context, gerritID string) (*models.Gerrit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerrit", ctx, gerritID)
	ret0, _ := ret[0].(*models.Gerrit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerrit indicates an expected call of GetGerrit.
func (mr *MockRepositoryMockRecorder) GetGerrit(ctx, gerritID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerrit", reflect.TypeOf((*MockRepository)(nil).GetGerrit), ctx, gerritID)
}

// GetGerritsByID mocks base method.
func (m *MockRepository) GetGerritsByID(ctx context.Context, ID, IDType string) (*models.GerritList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerritsByID", ctx, ID, IDType)
	ret0, _ := ret[0].(*models.GerritList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerritsByID indicates an expected call of GetGerritsByID.
func (mr *MockRepositoryMockRecorder) GetGerritsByID(ctx, ID, IDType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerritsByID", reflect.TypeOf((*MockRepository)(nil).GetGerritsByID), ctx, ID, IDType)
}

// GetGerritsByProjectSFID mocks base method.
func (m *MockRepository) GetGerritsByProjectSFID(ctx context.Context, projectSFID string) (*models.GerritList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGerritsByProjectSFID", ctx, projectSFID)
	ret0, _ := ret[0].(*models.GerritList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGerritsByProjectSFID indicates an expected call of GetGerritsByProjectSFID.
func (mr *MockRepositoryMockRecorder) GetGerritsByProjectSFID(ctx, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGerritsByProjectSFID", reflect.TypeOf((*MockRepository)(nil).GetGerritsByProjectSFID), ctx, projectSFID)
}
