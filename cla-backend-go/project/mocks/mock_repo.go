// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: project/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	project "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/restapi/operations/project"
)

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// CreateCLAGroup mocks base method.
func (m *MockProjectRepository) CreateCLAGroup(ctx context.Context, claGroupModel *models.ClaGroup) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCLAGroup", ctx, claGroupModel)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCLAGroup indicates an expected call of CreateCLAGroup.
func (mr *MockProjectRepositoryMockRecorder) CreateCLAGroup(ctx, claGroupModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCLAGroup", reflect.TypeOf((*MockProjectRepository)(nil).CreateCLAGroup), ctx, claGroupModel)
}

// DeleteCLAGroup mocks base method.
func (m *MockProjectRepository) DeleteCLAGroup(ctx context.Context, claGroupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCLAGroup", ctx, claGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCLAGroup indicates an expected call of DeleteCLAGroup.
func (mr *MockProjectRepositoryMockRecorder) DeleteCLAGroup(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCLAGroup", reflect.TypeOf((*MockProjectRepository)(nil).DeleteCLAGroup), ctx, claGroupID)
}

// GetCLAGroupByID mocks base method.
func (m *MockProjectRepository) GetCLAGroupByID(ctx context.Context, claGroupID string, loadRepoDetails bool) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroupByID", ctx, claGroupID, loadRepoDetails)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroupByID indicates an expected call of GetCLAGroupByID.
func (mr *MockProjectRepositoryMockRecorder) GetCLAGroupByID(ctx, claGroupID, loadRepoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroupByID", reflect.TypeOf((*MockProjectRepository)(nil).GetCLAGroupByID), ctx, claGroupID, loadRepoDetails)
}

// GetCLAGroupByName mocks base method.
func (m *MockProjectRepository) GetCLAGroupByName(ctx context.Context, claGroupName string) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroupByName", ctx, claGroupName)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroupByName indicates an expected call of GetCLAGroupByName.
func (mr *MockProjectRepositoryMockRecorder) GetCLAGroupByName(ctx, claGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroupByName", reflect.TypeOf((*MockProjectRepository)(nil).GetCLAGroupByName), ctx, claGroupName)
}

// GetCLAGroups mocks base method.
func (m *MockProjectRepository) GetCLAGroups(ctx context.Context, params *project.GetProjectsParams) (*models.ClaGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroups", ctx, params)
	ret0, _ := ret[0].(*models.ClaGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroups indicates an expected call of GetCLAGroups.
func (mr *MockProjectRepositoryMockRecorder) GetCLAGroups(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroups", reflect.TypeOf((*MockProjectRepository)(nil).GetCLAGroups), ctx, params)
}

// GetCLAGroupsByExternalID mocks base method.
func (m *MockProjectRepository) GetCLAGroupsByExternalID(ctx context.Context, params *project.GetProjectsByExternalIDParams, loadRepoDetails bool) (*models.ClaGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLAGroupsByExternalID", ctx, params, loadRepoDetails)
	ret0, _ := ret[0].(*models.ClaGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLAGroupsByExternalID indicates an expected call of GetCLAGroupsByExternalID.
func (mr *MockProjectRepositoryMockRecorder) GetCLAGroupsByExternalID(ctx, params, loadRepoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLAGroupsByExternalID", reflect.TypeOf((*MockProjectRepository)(nil).GetCLAGroupsByExternalID), ctx, params, loadRepoDetails)
}

// GetClaGroupByProjectSFID mocks base method.
func (m *MockProjectRepository) GetClaGroupByProjectSFID(ctx context.Context, projectSFID string, loadRepoDetails bool) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupByProjectSFID", ctx, projectSFID, loadRepoDetails)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupByProjectSFID indicates an expected call of GetClaGroupByProjectSFID.
func (mr *MockProjectRepositoryMockRecorder) GetClaGroupByProjectSFID(ctx, projectSFID, loadRepoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupByProjectSFID", reflect.TypeOf((*MockProjectRepository)(nil).GetClaGroupByProjectSFID), ctx, projectSFID, loadRepoDetails)
}

// GetClaGroupsByFoundationSFID mocks base method.
func (m *MockProjectRepository) GetClaGroupsByFoundationSFID(ctx context.Context, foundationSFID string, loadRepoDetails bool) (*models.ClaGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupsByFoundationSFID", ctx, foundationSFID, loadRepoDetails)
	ret0, _ := ret[0].(*models.ClaGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupsByFoundationSFID indicates an expected call of GetClaGroupsByFoundationSFID.
func (mr *MockProjectRepositoryMockRecorder) GetClaGroupsByFoundationSFID(ctx, foundationSFID, loadRepoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupsByFoundationSFID", reflect.TypeOf((*MockProjectRepository)(nil).GetClaGroupsByFoundationSFID), ctx, foundationSFID, loadRepoDetails)
}

// GetExternalCLAGroup mocks base method.
func (m *MockProjectRepository) GetExternalCLAGroup(ctx context.Context, claGroupExternalID string) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalCLAGroup", ctx, claGroupExternalID)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalCLAGroup indicates an expected call of GetExternalCLAGroup.
func (mr *MockProjectRepositoryMockRecorder) GetExternalCLAGroup(ctx, claGroupExternalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalCLAGroup", reflect.TypeOf((*MockProjectRepository)(nil).GetExternalCLAGroup), ctx, claGroupExternalID)
}

// UpdateCLAGroup mocks base method.
func (m *MockProjectRepository) UpdateCLAGroup(ctx context.Context, claGroupModel *models.ClaGroup) (*models.ClaGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCLAGroup", ctx, claGroupModel)
	ret0, _ := ret[0].(*models.ClaGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCLAGroup indicates an expected call of UpdateCLAGroup.
func (mr *MockProjectRepositoryMockRecorder) UpdateCLAGroup(ctx, claGroupModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCLAGroup", reflect.TypeOf((*MockProjectRepository)(nil).UpdateCLAGroup), ctx, claGroupModel)
}

// UpdateRootCLAGroupRepositoriesCount mocks base method.
func (m *MockProjectRepository) UpdateRootCLAGroupRepositoriesCount(ctx context.Context, claGroupID string, diff int64, reset bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRootCLAGroupRepositoriesCount", ctx, claGroupID, diff, reset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRootCLAGroupRepositoriesCount indicates an expected call of UpdateRootCLAGroupRepositoriesCount.
func (mr *MockProjectRepositoryMockRecorder) UpdateRootCLAGroupRepositoriesCount(ctx, claGroupID, diff, reset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRootCLAGroupRepositoriesCount", reflect.TypeOf((*MockProjectRepository)(nil).UpdateRootCLAGroupRepositoriesCount), ctx, claGroupID, diff, reset)
}
