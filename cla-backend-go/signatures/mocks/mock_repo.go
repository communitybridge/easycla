// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: signatures/repository.go

// Package mock_signatures is a generated GoMock package.
package mock_signatures

import (
	context "context"
	reflect "reflect"
	sync "sync"

	events "github.com/linuxfoundation/easycla/cla-backend-go/events"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	signatures "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/restapi/operations/signatures"
	signatures0 "github.com/linuxfoundation/easycla/cla-backend-go/signatures"
	gomock "github.com/golang/mock/gomock"
)

// MockSignatureRepository is a mock of SignatureRepository interface.
type MockSignatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureRepositoryMockRecorder
}

// MockSignatureRepositoryMockRecorder is the mock recorder for MockSignatureRepository.
type MockSignatureRepositoryMockRecorder struct {
	mock *MockSignatureRepository
}

// NewMockSignatureRepository creates a new mock instance.
func NewMockSignatureRepository(ctrl *gomock.Controller) *MockSignatureRepository {
	mock := &MockSignatureRepository{ctrl: ctrl}
	mock.recorder = &MockSignatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureRepository) EXPECT() *MockSignatureRepositoryMockRecorder {
	return m.recorder
}

// ActivateSignature mocks base method.
func (m *MockSignatureRepository) ActivateSignature(ctx context.Context, signatureID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSignature", ctx, signatureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateSignature indicates an expected call of ActivateSignature.
func (mr *MockSignatureRepositoryMockRecorder) ActivateSignature(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSignature", reflect.TypeOf((*MockSignatureRepository)(nil).ActivateSignature), ctx, signatureID)
}

// AddCLAManager mocks base method.
func (m *MockSignatureRepository) AddCLAManager(ctx context.Context, signatureID, claManagerID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCLAManager", ctx, signatureID, claManagerID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCLAManager indicates an expected call of AddCLAManager.
func (mr *MockSignatureRepositoryMockRecorder) AddCLAManager(ctx, signatureID, claManagerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCLAManager", reflect.TypeOf((*MockSignatureRepository)(nil).AddCLAManager), ctx, signatureID, claManagerID)
}

// AddGithubOrganizationToApprovalList mocks base method.
func (m *MockSignatureRepository) AddGithubOrganizationToApprovalList(ctx context.Context, signatureID, githubOrganizationID string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGithubOrganizationToApprovalList", ctx, signatureID, githubOrganizationID)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGithubOrganizationToApprovalList indicates an expected call of AddGithubOrganizationToApprovalList.
func (mr *MockSignatureRepositoryMockRecorder) AddGithubOrganizationToApprovalList(ctx, signatureID, githubOrganizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGithubOrganizationToApprovalList", reflect.TypeOf((*MockSignatureRepository)(nil).AddGithubOrganizationToApprovalList), ctx, signatureID, githubOrganizationID)
}

// AddSigTypeSignedApprovedID mocks base method.
func (m *MockSignatureRepository) AddSigTypeSignedApprovedID(ctx context.Context, signatureID, val string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSigTypeSignedApprovedID", ctx, signatureID, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSigTypeSignedApprovedID indicates an expected call of AddSigTypeSignedApprovedID.
func (mr *MockSignatureRepositoryMockRecorder) AddSigTypeSignedApprovedID(ctx, signatureID, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSigTypeSignedApprovedID", reflect.TypeOf((*MockSignatureRepository)(nil).AddSigTypeSignedApprovedID), ctx, signatureID, val)
}

// AddSignedOn mocks base method.
func (m *MockSignatureRepository) AddSignedOn(ctx context.Context, signatureID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSignedOn", ctx, signatureID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSignedOn indicates an expected call of AddSignedOn.
func (mr *MockSignatureRepositoryMockRecorder) AddSignedOn(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSignedOn", reflect.TypeOf((*MockSignatureRepository)(nil).AddSignedOn), ctx, signatureID)
}

// AddUsersDetails mocks base method.
func (m *MockSignatureRepository) AddUsersDetails(ctx context.Context, signatureID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsersDetails", ctx, signatureID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUsersDetails indicates an expected call of AddUsersDetails.
func (mr *MockSignatureRepositoryMockRecorder) AddUsersDetails(ctx, signatureID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersDetails", reflect.TypeOf((*MockSignatureRepository)(nil).AddUsersDetails), ctx, signatureID, userID)
}

// CreateProjectCompanyEmployeeSignature mocks base method.
func (m *MockSignatureRepository) CreateProjectCompanyEmployeeSignature(ctx context.Context, companyModel *models.Company, claGroupModel *models.ClaGroup, employeeUserModel *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCompanyEmployeeSignature", ctx, companyModel, claGroupModel, employeeUserModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjectCompanyEmployeeSignature indicates an expected call of CreateProjectCompanyEmployeeSignature.
func (mr *MockSignatureRepositoryMockRecorder) CreateProjectCompanyEmployeeSignature(ctx, companyModel, claGroupModel, employeeUserModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCompanyEmployeeSignature", reflect.TypeOf((*MockSignatureRepository)(nil).CreateProjectCompanyEmployeeSignature), ctx, companyModel, claGroupModel, employeeUserModel)
}

// CreateProjectSummaryReport mocks base method.
func (m *MockSignatureRepository) CreateProjectSummaryReport(ctx context.Context, params signatures.CreateProjectSummaryReportParams) (*models.SignatureReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectSummaryReport", ctx, params)
	ret0, _ := ret[0].(*models.SignatureReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectSummaryReport indicates an expected call of CreateProjectSummaryReport.
func (mr *MockSignatureRepositoryMockRecorder) CreateProjectSummaryReport(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectSummaryReport", reflect.TypeOf((*MockSignatureRepository)(nil).CreateProjectSummaryReport), ctx, params)
}

// CreateSignature mocks base method.
func (m *MockSignatureRepository) CreateSignature(ctx context.Context, signature *signatures0.ItemSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignature", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignature indicates an expected call of CreateSignature.
func (mr *MockSignatureRepositoryMockRecorder) CreateSignature(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignature", reflect.TypeOf((*MockSignatureRepository)(nil).CreateSignature), ctx, signature)
}

// DeleteGithubOrganizationFromApprovalList mocks base method.
func (m *MockSignatureRepository) DeleteGithubOrganizationFromApprovalList(ctx context.Context, signatureID, githubOrganizationID string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubOrganizationFromApprovalList", ctx, signatureID, githubOrganizationID)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGithubOrganizationFromApprovalList indicates an expected call of DeleteGithubOrganizationFromApprovalList.
func (mr *MockSignatureRepositoryMockRecorder) DeleteGithubOrganizationFromApprovalList(ctx, signatureID, githubOrganizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubOrganizationFromApprovalList", reflect.TypeOf((*MockSignatureRepository)(nil).DeleteGithubOrganizationFromApprovalList), ctx, signatureID, githubOrganizationID)
}

// EclaAutoCreate mocks base method.
func (m *MockSignatureRepository) EclaAutoCreate(ctx context.Context, signatureID string, autoCreateECLA bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EclaAutoCreate", ctx, signatureID, autoCreateECLA)
	ret0, _ := ret[0].(error)
	return ret0
}

// EclaAutoCreate indicates an expected call of EclaAutoCreate.
func (mr *MockSignatureRepositoryMockRecorder) EclaAutoCreate(ctx, signatureID, autoCreateECLA interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EclaAutoCreate", reflect.TypeOf((*MockSignatureRepository)(nil).EclaAutoCreate), ctx, signatureID, autoCreateECLA)
}

// GetActivePullRequestMetadata mocks base method.
func (m *MockSignatureRepository) GetActivePullRequestMetadata(ctx context.Context, gitHubAuthorUsername, gitHubAuthorEmail string) (*signatures0.ActivePullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePullRequestMetadata", ctx, gitHubAuthorUsername, gitHubAuthorEmail)
	ret0, _ := ret[0].(*signatures0.ActivePullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePullRequestMetadata indicates an expected call of GetActivePullRequestMetadata.
func (mr *MockSignatureRepositoryMockRecorder) GetActivePullRequestMetadata(ctx, gitHubAuthorUsername, gitHubAuthorEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePullRequestMetadata", reflect.TypeOf((*MockSignatureRepository)(nil).GetActivePullRequestMetadata), ctx, gitHubAuthorUsername, gitHubAuthorEmail)
}

// GetCCLASignatures mocks base method.
func (m *MockSignatureRepository) GetCCLASignatures(ctx context.Context, signed, approved *bool) ([]*signatures0.ItemSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCCLASignatures", ctx, signed, approved)
	ret0, _ := ret[0].([]*signatures0.ItemSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCCLASignatures indicates an expected call of GetCCLASignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetCCLASignatures(ctx, signed, approved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCCLASignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetCCLASignatures), ctx, signed, approved)
}

// GetClaGroupCorporateContributors mocks base method.
func (m *MockSignatureRepository) GetClaGroupCorporateContributors(ctx context.Context, claGroupID string, companyID *string, pageSize *int64, nextKey, searchTerm *string) (*models.CorporateContributorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupCorporateContributors", ctx, claGroupID, companyID, pageSize, nextKey, searchTerm)
	ret0, _ := ret[0].(*models.CorporateContributorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupCorporateContributors indicates an expected call of GetClaGroupCorporateContributors.
func (mr *MockSignatureRepositoryMockRecorder) GetClaGroupCorporateContributors(ctx, claGroupID, companyID, pageSize, nextKey, searchTerm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupCorporateContributors", reflect.TypeOf((*MockSignatureRepository)(nil).GetClaGroupCorporateContributors), ctx, claGroupID, companyID, pageSize, nextKey, searchTerm)
}

// GetClaGroupICLASignatures mocks base method.
func (m *MockSignatureRepository) GetClaGroupICLASignatures(ctx context.Context, claGroupID string, searchTerm *string, approved, signed *bool, pageSize int64, nextKey string, withExtraDetails bool) (*models.IclaSignatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupICLASignatures", ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails)
	ret0, _ := ret[0].(*models.IclaSignatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupICLASignatures indicates an expected call of GetClaGroupICLASignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetClaGroupICLASignatures(ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupICLASignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetClaGroupICLASignatures), ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails)
}

// GetCompanyIDsWithSignedCorporateSignatures mocks base method.
func (m *MockSignatureRepository) GetCompanyIDsWithSignedCorporateSignatures(ctx context.Context, claGroupID string) ([]signatures0.SignatureCompanyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyIDsWithSignedCorporateSignatures", ctx, claGroupID)
	ret0, _ := ret[0].([]signatures0.SignatureCompanyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyIDsWithSignedCorporateSignatures indicates an expected call of GetCompanyIDsWithSignedCorporateSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetCompanyIDsWithSignedCorporateSignatures(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyIDsWithSignedCorporateSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetCompanyIDsWithSignedCorporateSignatures), ctx, claGroupID)
}

// GetCompanySignatures mocks base method.
func (m *MockSignatureRepository) GetCompanySignatures(ctx context.Context, params signatures.GetCompanySignaturesParams, pageSize int64, loadACL bool) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanySignatures", ctx, params, pageSize, loadACL)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanySignatures indicates an expected call of GetCompanySignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetCompanySignatures(ctx, params, pageSize, loadACL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanySignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetCompanySignatures), ctx, params, pageSize, loadACL)
}

// GetCorporateSignature mocks base method.
func (m *MockSignatureRepository) GetCorporateSignature(ctx context.Context, claGroupID, companyID string, approved, signed *bool) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporateSignature", ctx, claGroupID, companyID, approved, signed)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorporateSignature indicates an expected call of GetCorporateSignature.
func (mr *MockSignatureRepositoryMockRecorder) GetCorporateSignature(ctx, claGroupID, companyID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporateSignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetCorporateSignature), ctx, claGroupID, companyID, approved, signed)
}

// GetCorporateSignatures mocks base method.
func (m *MockSignatureRepository) GetCorporateSignatures(ctx context.Context, claGroupID, companyID string, approved, signed *bool) ([]*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporateSignatures", ctx, claGroupID, companyID, approved, signed)
	ret0, _ := ret[0].([]*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorporateSignatures indicates an expected call of GetCorporateSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetCorporateSignatures(ctx, claGroupID, companyID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporateSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetCorporateSignatures), ctx, claGroupID, companyID, approved, signed)
}

// GetGithubOrganizationsFromApprovalList mocks base method.
func (m *MockSignatureRepository) GetGithubOrganizationsFromApprovalList(ctx context.Context, signatureID string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganizationsFromApprovalList", ctx, signatureID)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationsFromApprovalList indicates an expected call of GetGithubOrganizationsFromApprovalList.
func (mr *MockSignatureRepositoryMockRecorder) GetGithubOrganizationsFromApprovalList(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganizationsFromApprovalList", reflect.TypeOf((*MockSignatureRepository)(nil).GetGithubOrganizationsFromApprovalList), ctx, signatureID)
}

// GetICLAByDate mocks base method.
func (m *MockSignatureRepository) GetICLAByDate(ctx context.Context, startDate string) ([]signatures0.ItemSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetICLAByDate", ctx, startDate)
	ret0, _ := ret[0].([]signatures0.ItemSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetICLAByDate indicates an expected call of GetICLAByDate.
func (mr *MockSignatureRepositoryMockRecorder) GetICLAByDate(ctx, startDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetICLAByDate", reflect.TypeOf((*MockSignatureRepository)(nil).GetICLAByDate), ctx, startDate)
}

// GetIndividualSignature mocks base method.
func (m *MockSignatureRepository) GetIndividualSignature(ctx context.Context, claGroupID, userID string, approved, signed *bool) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualSignature", ctx, claGroupID, userID, approved, signed)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualSignature indicates an expected call of GetIndividualSignature.
func (mr *MockSignatureRepositoryMockRecorder) GetIndividualSignature(ctx, claGroupID, userID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualSignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetIndividualSignature), ctx, claGroupID, userID, approved, signed)
}

// GetIndividualSignatures mocks base method.
func (m *MockSignatureRepository) GetIndividualSignatures(ctx context.Context, claGroupID, userID string, approved, signed *bool) ([]*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualSignatures", ctx, claGroupID, userID, approved, signed)
	ret0, _ := ret[0].([]*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualSignatures indicates an expected call of GetIndividualSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetIndividualSignatures(ctx, claGroupID, userID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetIndividualSignatures), ctx, claGroupID, userID, approved, signed)
}

// GetItemSignature mocks base method.
func (m *MockSignatureRepository) GetItemSignature(ctx context.Context, signatureID string) (*signatures0.ItemSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemSignature", ctx, signatureID)
	ret0, _ := ret[0].(*signatures0.ItemSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemSignature indicates an expected call of GetItemSignature.
func (mr *MockSignatureRepositoryMockRecorder) GetItemSignature(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemSignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetItemSignature), ctx, signatureID)
}

// GetProjectCompanyEmployeeSignature mocks base method.
func (m *MockSignatureRepository) GetProjectCompanyEmployeeSignature(ctx context.Context, companyModel *models.Company, claGroupModel *models.ClaGroup, employeeUserModel *models.User, wg *sync.WaitGroup, resultChannel chan<- *signatures0.EmployeeModel, errorChannel chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProjectCompanyEmployeeSignature", ctx, companyModel, claGroupModel, employeeUserModel, wg, resultChannel, errorChannel)
}

// GetProjectCompanyEmployeeSignature indicates an expected call of GetProjectCompanyEmployeeSignature.
func (mr *MockSignatureRepositoryMockRecorder) GetProjectCompanyEmployeeSignature(ctx, companyModel, claGroupModel, employeeUserModel, wg, resultChannel, errorChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanyEmployeeSignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetProjectCompanyEmployeeSignature), ctx, companyModel, claGroupModel, employeeUserModel, wg, resultChannel, errorChannel)
}

// GetProjectCompanyEmployeeSignatures mocks base method.
func (m *MockSignatureRepository) GetProjectCompanyEmployeeSignatures(ctx context.Context, params signatures.GetProjectCompanyEmployeeSignaturesParams, criteria *signatures0.ApprovalCriteria) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanyEmployeeSignatures", ctx, params, criteria)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanyEmployeeSignatures indicates an expected call of GetProjectCompanyEmployeeSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetProjectCompanyEmployeeSignatures(ctx, params, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanyEmployeeSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetProjectCompanyEmployeeSignatures), ctx, params, criteria)
}

// GetProjectCompanySignature mocks base method.
func (m *MockSignatureRepository) GetProjectCompanySignature(ctx context.Context, companyID, projectID string, approved, signed *bool, nextKey *string, pageSize *int64) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanySignature", ctx, companyID, projectID, approved, signed, nextKey, pageSize)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanySignature indicates an expected call of GetProjectCompanySignature.
func (mr *MockSignatureRepositoryMockRecorder) GetProjectCompanySignature(ctx, companyID, projectID, approved, signed, nextKey, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanySignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetProjectCompanySignature), ctx, companyID, projectID, approved, signed, nextKey, pageSize)
}

// GetProjectCompanySignatures mocks base method.
func (m *MockSignatureRepository) GetProjectCompanySignatures(ctx context.Context, companyID, projectID string, approved, signed *bool, nextKey, sortOrder *string, pageSize *int64) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanySignatures", ctx, companyID, projectID, approved, signed, nextKey, sortOrder, pageSize)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanySignatures indicates an expected call of GetProjectCompanySignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetProjectCompanySignatures(ctx, companyID, projectID, approved, signed, nextKey, sortOrder, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanySignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetProjectCompanySignatures), ctx, companyID, projectID, approved, signed, nextKey, sortOrder, pageSize)
}

// GetProjectSignatures mocks base method.
func (m *MockSignatureRepository) GetProjectSignatures(ctx context.Context, params signatures.GetProjectSignaturesParams) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectSignatures", ctx, params)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectSignatures indicates an expected call of GetProjectSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetProjectSignatures(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetProjectSignatures), ctx, params)
}

// GetSignature mocks base method.
func (m *MockSignatureRepository) GetSignature(ctx context.Context, signatureID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature", ctx, signatureID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignature indicates an expected call of GetSignature.
func (mr *MockSignatureRepositoryMockRecorder) GetSignature(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockSignatureRepository)(nil).GetSignature), ctx, signatureID)
}

// GetSignatureACL mocks base method.
func (m *MockSignatureRepository) GetSignatureACL(ctx context.Context, signatureID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatureACL", ctx, signatureID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatureACL indicates an expected call of GetSignatureACL.
func (mr *MockSignatureRepositoryMockRecorder) GetSignatureACL(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatureACL", reflect.TypeOf((*MockSignatureRepository)(nil).GetSignatureACL), ctx, signatureID)
}

// GetUserSignatures mocks base method.
func (m *MockSignatureRepository) GetUserSignatures(ctx context.Context, params signatures.GetUserSignaturesParams, pageSize int64, projectID *string) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSignatures", ctx, params, pageSize, projectID)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSignatures indicates an expected call of GetUserSignatures.
func (mr *MockSignatureRepositoryMockRecorder) GetUserSignatures(ctx, params, pageSize, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).GetUserSignatures), ctx, params, pageSize, projectID)
}

// InvalidateProjectRecord mocks base method.
func (m *MockSignatureRepository) InvalidateProjectRecord(ctx context.Context, signatureID, note string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateProjectRecord", ctx, signatureID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateProjectRecord indicates an expected call of InvalidateProjectRecord.
func (mr *MockSignatureRepositoryMockRecorder) InvalidateProjectRecord(ctx, signatureID, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateProjectRecord", reflect.TypeOf((*MockSignatureRepository)(nil).InvalidateProjectRecord), ctx, signatureID, note)
}

// ProjectSignatures mocks base method.
func (m *MockSignatureRepository) ProjectSignatures(ctx context.Context, projectID string) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectSignatures", ctx, projectID)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectSignatures indicates an expected call of ProjectSignatures.
func (mr *MockSignatureRepositoryMockRecorder) ProjectSignatures(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectSignatures", reflect.TypeOf((*MockSignatureRepository)(nil).ProjectSignatures), ctx, projectID)
}

// RemoveCLAManager mocks base method.
func (m *MockSignatureRepository) RemoveCLAManager(ctx context.Context, signatureID, claManagerID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCLAManager", ctx, signatureID, claManagerID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCLAManager indicates an expected call of RemoveCLAManager.
func (mr *MockSignatureRepositoryMockRecorder) RemoveCLAManager(ctx, signatureID, claManagerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCLAManager", reflect.TypeOf((*MockSignatureRepository)(nil).RemoveCLAManager), ctx, signatureID, claManagerID)
}

// SaveOrUpdateSignature mocks base method.
func (m *MockSignatureRepository) SaveOrUpdateSignature(ctx context.Context, signature *signatures0.ItemSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateSignature", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateSignature indicates an expected call of SaveOrUpdateSignature.
func (mr *MockSignatureRepositoryMockRecorder) SaveOrUpdateSignature(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateSignature", reflect.TypeOf((*MockSignatureRepository)(nil).SaveOrUpdateSignature), ctx, signature)
}

// UpdateApprovalList mocks base method.
func (m *MockSignatureRepository) UpdateApprovalList(ctx context.Context, claManager *models.User, claGroupModel *models.ClaGroup, companyID string, params *models.ApprovalList, eventArgs *events.LogEventArgs) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApprovalList", ctx, claManager, claGroupModel, companyID, params, eventArgs)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApprovalList indicates an expected call of UpdateApprovalList.
func (mr *MockSignatureRepositoryMockRecorder) UpdateApprovalList(ctx, claManager, claGroupModel, companyID, params, eventArgs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApprovalList", reflect.TypeOf((*MockSignatureRepository)(nil).UpdateApprovalList), ctx, claManager, claGroupModel, companyID, params, eventArgs)
}

// UpdateEnvelopeDetails mocks base method.
func (m *MockSignatureRepository) UpdateEnvelopeDetails(ctx context.Context, signatureID, envelopeID string, signURL *string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelopeDetails", ctx, signatureID, envelopeID, signURL)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvelopeDetails indicates an expected call of UpdateEnvelopeDetails.
func (mr *MockSignatureRepositoryMockRecorder) UpdateEnvelopeDetails(ctx, signatureID, envelopeID, signURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelopeDetails", reflect.TypeOf((*MockSignatureRepository)(nil).UpdateEnvelopeDetails), ctx, signatureID, envelopeID, signURL)
}

// UpdateSignature mocks base method.
func (m *MockSignatureRepository) UpdateSignature(ctx context.Context, signatureID string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignature", ctx, signatureID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignature indicates an expected call of UpdateSignature.
func (mr *MockSignatureRepositoryMockRecorder) UpdateSignature(ctx, signatureID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignature", reflect.TypeOf((*MockSignatureRepository)(nil).UpdateSignature), ctx, signatureID, updates)
}

// ValidateProjectRecord mocks base method.
func (m *MockSignatureRepository) ValidateProjectRecord(ctx context.Context, signatureID, note string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectRecord", ctx, signatureID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProjectRecord indicates an expected call of ValidateProjectRecord.
func (mr *MockSignatureRepositoryMockRecorder) ValidateProjectRecord(ctx, signatureID, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectRecord", reflect.TypeOf((*MockSignatureRepository)(nil).ValidateProjectRecord), ctx, signatureID, note)
}
