// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: signatures/service.go

// Package mock_signatures is a generated GoMock package.
package mock_signatures

import (
	context "context"
	reflect "reflect"

	auth "github.com/LF-Engineering/lfx-kit/auth"
	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	signatures "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/restapi/operations/signatures"
	signatures0 "github.com/linuxfoundation/easycla/cla-backend-go/signatures"
	gomock "github.com/golang/mock/gomock"
)

// MockSignatureService is a mock of SignatureService interface.
type MockSignatureService struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureServiceMockRecorder
}

// MockSignatureServiceMockRecorder is the mock recorder for MockSignatureService.
type MockSignatureServiceMockRecorder struct {
	mock *MockSignatureService
}

// NewMockSignatureService creates a new mock instance.
func NewMockSignatureService(ctrl *gomock.Controller) *MockSignatureService {
	mock := &MockSignatureService{ctrl: ctrl}
	mock.recorder = &MockSignatureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureService) EXPECT() *MockSignatureServiceMockRecorder {
	return m.recorder
}

// AddCLAManager mocks base method.
func (m *MockSignatureService) AddCLAManager(ctx context.Context, signatureID, claManagerID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCLAManager", ctx, signatureID, claManagerID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCLAManager indicates an expected call of AddCLAManager.
func (mr *MockSignatureServiceMockRecorder) AddCLAManager(ctx, signatureID, claManagerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCLAManager", reflect.TypeOf((*MockSignatureService)(nil).AddCLAManager), ctx, signatureID, claManagerID)
}

// AddGithubOrganizationToApprovalList mocks base method.
func (m *MockSignatureService) AddGithubOrganizationToApprovalList(ctx context.Context, signatureID string, approvalListParams models.GhOrgWhitelist, githubAccessToken string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGithubOrganizationToApprovalList", ctx, signatureID, approvalListParams, githubAccessToken)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGithubOrganizationToApprovalList indicates an expected call of AddGithubOrganizationToApprovalList.
func (mr *MockSignatureServiceMockRecorder) AddGithubOrganizationToApprovalList(ctx, signatureID, approvalListParams, githubAccessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGithubOrganizationToApprovalList", reflect.TypeOf((*MockSignatureService)(nil).AddGithubOrganizationToApprovalList), ctx, signatureID, approvalListParams, githubAccessToken)
}

// CreateOrUpdateEmployeeSignature mocks base method.
func (m *MockSignatureService) CreateOrUpdateEmployeeSignature(ctx context.Context, claGroupModel *models.ClaGroup, companyModel *models.Company, corporateSignatureModel *models.Signature) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateEmployeeSignature", ctx, claGroupModel, companyModel, corporateSignatureModel)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateEmployeeSignature indicates an expected call of CreateOrUpdateEmployeeSignature.
func (mr *MockSignatureServiceMockRecorder) CreateOrUpdateEmployeeSignature(ctx, claGroupModel, companyModel, corporateSignatureModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateEmployeeSignature", reflect.TypeOf((*MockSignatureService)(nil).CreateOrUpdateEmployeeSignature), ctx, claGroupModel, companyModel, corporateSignatureModel)
}

// CreateProjectSummaryReport mocks base method.
func (m *MockSignatureService) CreateProjectSummaryReport(ctx context.Context, params signatures.CreateProjectSummaryReportParams) (*models.SignatureReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectSummaryReport", ctx, params)
	ret0, _ := ret[0].(*models.SignatureReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectSummaryReport indicates an expected call of CreateProjectSummaryReport.
func (mr *MockSignatureServiceMockRecorder) CreateProjectSummaryReport(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectSummaryReport", reflect.TypeOf((*MockSignatureService)(nil).CreateProjectSummaryReport), ctx, params)
}

// CreateSignature mocks base method.
func (m *MockSignatureService) CreateSignature(ctx context.Context, signature *signatures0.ItemSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignature", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignature indicates an expected call of CreateSignature.
func (mr *MockSignatureServiceMockRecorder) CreateSignature(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignature", reflect.TypeOf((*MockSignatureService)(nil).CreateSignature), ctx, signature)
}

// DeleteGithubOrganizationFromApprovalList mocks base method.
func (m *MockSignatureService) DeleteGithubOrganizationFromApprovalList(ctx context.Context, signatureID string, approvalListParams models.GhOrgWhitelist, githubAccessToken string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGithubOrganizationFromApprovalList", ctx, signatureID, approvalListParams, githubAccessToken)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGithubOrganizationFromApprovalList indicates an expected call of DeleteGithubOrganizationFromApprovalList.
func (mr *MockSignatureServiceMockRecorder) DeleteGithubOrganizationFromApprovalList(ctx, signatureID, approvalListParams, githubAccessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGithubOrganizationFromApprovalList", reflect.TypeOf((*MockSignatureService)(nil).DeleteGithubOrganizationFromApprovalList), ctx, signatureID, approvalListParams, githubAccessToken)
}

// GetCCLASignatures mocks base method.
func (m *MockSignatureService) GetCCLASignatures(ctx context.Context, signed, approved *bool) ([]*signatures0.ItemSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCCLASignatures", ctx, signed, approved)
	ret0, _ := ret[0].([]*signatures0.ItemSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCCLASignatures indicates an expected call of GetCCLASignatures.
func (mr *MockSignatureServiceMockRecorder) GetCCLASignatures(ctx, signed, approved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCCLASignatures", reflect.TypeOf((*MockSignatureService)(nil).GetCCLASignatures), ctx, signed, approved)
}

// GetClaGroupCCLASignatures mocks base method.
func (m *MockSignatureService) GetClaGroupCCLASignatures(ctx context.Context, claGroupID string, approved, signed *bool) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupCCLASignatures", ctx, claGroupID, approved, signed)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupCCLASignatures indicates an expected call of GetClaGroupCCLASignatures.
func (mr *MockSignatureServiceMockRecorder) GetClaGroupCCLASignatures(ctx, claGroupID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupCCLASignatures", reflect.TypeOf((*MockSignatureService)(nil).GetClaGroupCCLASignatures), ctx, claGroupID, approved, signed)
}

// GetClaGroupCorporateContributors mocks base method.
func (m *MockSignatureService) GetClaGroupCorporateContributors(ctx context.Context, claGroupID string, companyID *string, pageSize *int64, nextKey, searchTerm *string) (*models.CorporateContributorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupCorporateContributors", ctx, claGroupID, companyID, pageSize, nextKey, searchTerm)
	ret0, _ := ret[0].(*models.CorporateContributorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupCorporateContributors indicates an expected call of GetClaGroupCorporateContributors.
func (mr *MockSignatureServiceMockRecorder) GetClaGroupCorporateContributors(ctx, claGroupID, companyID, pageSize, nextKey, searchTerm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupCorporateContributors", reflect.TypeOf((*MockSignatureService)(nil).GetClaGroupCorporateContributors), ctx, claGroupID, companyID, pageSize, nextKey, searchTerm)
}

// GetClaGroupICLASignatures mocks base method.
func (m *MockSignatureService) GetClaGroupICLASignatures(ctx context.Context, claGroupID string, searchTerm *string, approved, signed *bool, pageSize int64, nextKey string, withExtraDetails bool) (*models.IclaSignatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaGroupICLASignatures", ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails)
	ret0, _ := ret[0].(*models.IclaSignatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaGroupICLASignatures indicates an expected call of GetClaGroupICLASignatures.
func (mr *MockSignatureServiceMockRecorder) GetClaGroupICLASignatures(ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaGroupICLASignatures", reflect.TypeOf((*MockSignatureService)(nil).GetClaGroupICLASignatures), ctx, claGroupID, searchTerm, approved, signed, pageSize, nextKey, withExtraDetails)
}

// GetCompanyIDsWithSignedCorporateSignatures mocks base method.
func (m *MockSignatureService) GetCompanyIDsWithSignedCorporateSignatures(ctx context.Context, claGroupID string) ([]signatures0.SignatureCompanyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyIDsWithSignedCorporateSignatures", ctx, claGroupID)
	ret0, _ := ret[0].([]signatures0.SignatureCompanyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyIDsWithSignedCorporateSignatures indicates an expected call of GetCompanyIDsWithSignedCorporateSignatures.
func (mr *MockSignatureServiceMockRecorder) GetCompanyIDsWithSignedCorporateSignatures(ctx, claGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyIDsWithSignedCorporateSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetCompanyIDsWithSignedCorporateSignatures), ctx, claGroupID)
}

// GetCompanySignatures mocks base method.
func (m *MockSignatureService) GetCompanySignatures(ctx context.Context, params signatures.GetCompanySignaturesParams) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanySignatures", ctx, params)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanySignatures indicates an expected call of GetCompanySignatures.
func (mr *MockSignatureServiceMockRecorder) GetCompanySignatures(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanySignatures", reflect.TypeOf((*MockSignatureService)(nil).GetCompanySignatures), ctx, params)
}

// GetCorporateSignature mocks base method.
func (m *MockSignatureService) GetCorporateSignature(ctx context.Context, claGroupID, companyID string, approved, signed *bool) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporateSignature", ctx, claGroupID, companyID, approved, signed)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorporateSignature indicates an expected call of GetCorporateSignature.
func (mr *MockSignatureServiceMockRecorder) GetCorporateSignature(ctx, claGroupID, companyID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporateSignature", reflect.TypeOf((*MockSignatureService)(nil).GetCorporateSignature), ctx, claGroupID, companyID, approved, signed)
}

// GetCorporateSignatures mocks base method.
func (m *MockSignatureService) GetCorporateSignatures(ctx context.Context, claGroupID, companyID string, approved, signed *bool) ([]*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporateSignatures", ctx, claGroupID, companyID, approved, signed)
	ret0, _ := ret[0].([]*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCorporateSignatures indicates an expected call of GetCorporateSignatures.
func (mr *MockSignatureServiceMockRecorder) GetCorporateSignatures(ctx, claGroupID, companyID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporateSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetCorporateSignatures), ctx, claGroupID, companyID, approved, signed)
}

// GetGithubOrganizationsFromApprovalList mocks base method.
func (m *MockSignatureService) GetGithubOrganizationsFromApprovalList(ctx context.Context, signatureID, githubAccessToken string) ([]models.GithubOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubOrganizationsFromApprovalList", ctx, signatureID, githubAccessToken)
	ret0, _ := ret[0].([]models.GithubOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationsFromApprovalList indicates an expected call of GetGithubOrganizationsFromApprovalList.
func (mr *MockSignatureServiceMockRecorder) GetGithubOrganizationsFromApprovalList(ctx, signatureID, githubAccessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubOrganizationsFromApprovalList", reflect.TypeOf((*MockSignatureService)(nil).GetGithubOrganizationsFromApprovalList), ctx, signatureID, githubAccessToken)
}

// GetIndividualSignature mocks base method.
func (m *MockSignatureService) GetIndividualSignature(ctx context.Context, claGroupID, userID string, approved, signed *bool) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualSignature", ctx, claGroupID, userID, approved, signed)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualSignature indicates an expected call of GetIndividualSignature.
func (mr *MockSignatureServiceMockRecorder) GetIndividualSignature(ctx, claGroupID, userID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualSignature", reflect.TypeOf((*MockSignatureService)(nil).GetIndividualSignature), ctx, claGroupID, userID, approved, signed)
}

// GetIndividualSignatures mocks base method.
func (m *MockSignatureService) GetIndividualSignatures(ctx context.Context, claGroupID, userID string, approved, signed *bool) ([]*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualSignatures", ctx, claGroupID, userID, approved, signed)
	ret0, _ := ret[0].([]*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualSignatures indicates an expected call of GetIndividualSignatures.
func (mr *MockSignatureServiceMockRecorder) GetIndividualSignatures(ctx, claGroupID, userID, approved, signed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetIndividualSignatures), ctx, claGroupID, userID, approved, signed)
}

// GetProjectCompanyEmployeeSignatures mocks base method.
func (m *MockSignatureService) GetProjectCompanyEmployeeSignatures(ctx context.Context, params signatures.GetProjectCompanyEmployeeSignaturesParams, criteria *signatures0.ApprovalCriteria) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanyEmployeeSignatures", ctx, params, criteria)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanyEmployeeSignatures indicates an expected call of GetProjectCompanyEmployeeSignatures.
func (mr *MockSignatureServiceMockRecorder) GetProjectCompanyEmployeeSignatures(ctx, params, criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanyEmployeeSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetProjectCompanyEmployeeSignatures), ctx, params, criteria)
}

// GetProjectCompanySignature mocks base method.
func (m *MockSignatureService) GetProjectCompanySignature(ctx context.Context, companyID, projectID string, approved, signed *bool, nextKey *string, pageSize *int64) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanySignature", ctx, companyID, projectID, approved, signed, nextKey, pageSize)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanySignature indicates an expected call of GetProjectCompanySignature.
func (mr *MockSignatureServiceMockRecorder) GetProjectCompanySignature(ctx, companyID, projectID, approved, signed, nextKey, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanySignature", reflect.TypeOf((*MockSignatureService)(nil).GetProjectCompanySignature), ctx, companyID, projectID, approved, signed, nextKey, pageSize)
}

// GetProjectCompanySignatures mocks base method.
func (m *MockSignatureService) GetProjectCompanySignatures(ctx context.Context, params signatures.GetProjectCompanySignaturesParams) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCompanySignatures", ctx, params)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCompanySignatures indicates an expected call of GetProjectCompanySignatures.
func (mr *MockSignatureServiceMockRecorder) GetProjectCompanySignatures(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCompanySignatures", reflect.TypeOf((*MockSignatureService)(nil).GetProjectCompanySignatures), ctx, params)
}

// GetProjectSignatures mocks base method.
func (m *MockSignatureService) GetProjectSignatures(ctx context.Context, params signatures.GetProjectSignaturesParams) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectSignatures", ctx, params)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectSignatures indicates an expected call of GetProjectSignatures.
func (mr *MockSignatureServiceMockRecorder) GetProjectSignatures(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetProjectSignatures), ctx, params)
}

// GetSignature mocks base method.
func (m *MockSignatureService) GetSignature(ctx context.Context, signatureID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature", ctx, signatureID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignature indicates an expected call of GetSignature.
func (mr *MockSignatureServiceMockRecorder) GetSignature(ctx, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockSignatureService)(nil).GetSignature), ctx, signatureID)
}

// GetUserSignatures mocks base method.
func (m *MockSignatureService) GetUserSignatures(ctx context.Context, params signatures.GetUserSignaturesParams, projectID *string) (*models.Signatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSignatures", ctx, params, projectID)
	ret0, _ := ret[0].(*models.Signatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSignatures indicates an expected call of GetUserSignatures.
func (mr *MockSignatureServiceMockRecorder) GetUserSignatures(ctx, params, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSignatures", reflect.TypeOf((*MockSignatureService)(nil).GetUserSignatures), ctx, params, projectID)
}

// HasUserSigned mocks base method.
func (m *MockSignatureService) HasUserSigned(ctx context.Context, user *models.User, projectID string) (*bool, *bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserSigned", ctx, user, projectID)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(*bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HasUserSigned indicates an expected call of HasUserSigned.
func (mr *MockSignatureServiceMockRecorder) HasUserSigned(ctx, user, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserSigned", reflect.TypeOf((*MockSignatureService)(nil).HasUserSigned), ctx, user, projectID)
}

// InvalidateProjectRecords mocks base method.
func (m *MockSignatureService) InvalidateProjectRecords(ctx context.Context, projectID, note string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateProjectRecords", ctx, projectID, note)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateProjectRecords indicates an expected call of InvalidateProjectRecords.
func (mr *MockSignatureServiceMockRecorder) InvalidateProjectRecords(ctx, projectID, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateProjectRecords", reflect.TypeOf((*MockSignatureService)(nil).InvalidateProjectRecords), ctx, projectID, note)
}

// ProcessEmployeeSignature mocks base method.
func (m *MockSignatureService) ProcessEmployeeSignature(ctx context.Context, companyModel *models.Company, claGroupModel *models.ClaGroup, user *models.User) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEmployeeSignature", ctx, companyModel, claGroupModel, user)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEmployeeSignature indicates an expected call of ProcessEmployeeSignature.
func (mr *MockSignatureServiceMockRecorder) ProcessEmployeeSignature(ctx, companyModel, claGroupModel, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEmployeeSignature", reflect.TypeOf((*MockSignatureService)(nil).ProcessEmployeeSignature), ctx, companyModel, claGroupModel, user)
}

// RemoveCLAManager mocks base method.
func (m *MockSignatureService) RemoveCLAManager(ctx context.Context, ignatureID, claManagerID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCLAManager", ctx, ignatureID, claManagerID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCLAManager indicates an expected call of RemoveCLAManager.
func (mr *MockSignatureServiceMockRecorder) RemoveCLAManager(ctx, ignatureID, claManagerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCLAManager", reflect.TypeOf((*MockSignatureService)(nil).RemoveCLAManager), ctx, ignatureID, claManagerID)
}

// SaveOrUpdateSignature mocks base method.
func (m *MockSignatureService) SaveOrUpdateSignature(ctx context.Context, signature *signatures0.ItemSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateSignature", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateSignature indicates an expected call of SaveOrUpdateSignature.
func (mr *MockSignatureServiceMockRecorder) SaveOrUpdateSignature(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateSignature", reflect.TypeOf((*MockSignatureService)(nil).SaveOrUpdateSignature), ctx, signature)
}

// UpdateApprovalList mocks base method.
func (m *MockSignatureService) UpdateApprovalList(ctx context.Context, authUser *auth.User, claGroupModel *models.ClaGroup, companyModel *models.Company, claGroupID string, params *models.ApprovalList, projectSFID string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApprovalList", ctx, authUser, claGroupModel, companyModel, claGroupID, params, projectSFID)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApprovalList indicates an expected call of UpdateApprovalList.
func (mr *MockSignatureServiceMockRecorder) UpdateApprovalList(ctx, authUser, claGroupModel, companyModel, claGroupID, params, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApprovalList", reflect.TypeOf((*MockSignatureService)(nil).UpdateApprovalList), ctx, authUser, claGroupModel, companyModel, claGroupID, params, projectSFID)
}

// UpdateEnvelopeDetails mocks base method.
func (m *MockSignatureService) UpdateEnvelopeDetails(ctx context.Context, signatureID, envelopeID string, signURL *string) (*models.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvelopeDetails", ctx, signatureID, envelopeID, signURL)
	ret0, _ := ret[0].(*models.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvelopeDetails indicates an expected call of UpdateEnvelopeDetails.
func (mr *MockSignatureServiceMockRecorder) UpdateEnvelopeDetails(ctx, signatureID, envelopeID, signURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvelopeDetails", reflect.TypeOf((*MockSignatureService)(nil).UpdateEnvelopeDetails), ctx, signatureID, envelopeID, signURL)
}

// UpdateSignature mocks base method.
func (m *MockSignatureService) UpdateSignature(ctx context.Context, signatureID string, updates map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignature", ctx, signatureID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignature indicates an expected call of UpdateSignature.
func (mr *MockSignatureServiceMockRecorder) UpdateSignature(ctx, signatureID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignature", reflect.TypeOf((*MockSignatureService)(nil).UpdateSignature), ctx, signatureID, updates)
}

// UserIsApproved mocks base method.
func (m *MockSignatureService) UserIsApproved(ctx context.Context, user *models.User, cclaSignature *models.Signature) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIsApproved", ctx, user, cclaSignature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserIsApproved indicates an expected call of UserIsApproved.
func (mr *MockSignatureServiceMockRecorder) UserIsApproved(ctx, user, cclaSignature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIsApproved", reflect.TypeOf((*MockSignatureService)(nil).UserIsApproved), ctx, user, cclaSignature)
}
