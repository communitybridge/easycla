// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github_organizations/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/linuxfoundation/easycla/cla-backend-go/gen/v1/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddGitHubOrganization mocks base method.
func (m *MockRepositoryInterface) AddGitHubOrganization(ctx context.Context, parentProjectSFID, projectSFID string, input *models.GithubCreateOrganization) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGitHubOrganization", ctx, parentProjectSFID, projectSFID, input)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGitHubOrganization indicates an expected call of AddGitHubOrganization.
func (mr *MockRepositoryInterfaceMockRecorder) AddGitHubOrganization(ctx, parentProjectSFID, projectSFID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGitHubOrganization", reflect.TypeOf((*MockRepositoryInterface)(nil).AddGitHubOrganization), ctx, parentProjectSFID, projectSFID, input)
}

// DeleteGitHubOrganization mocks base method.
func (m *MockRepositoryInterface) DeleteGitHubOrganization(ctx context.Context, projectSFID, githubOrgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitHubOrganization", ctx, projectSFID, githubOrgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitHubOrganization indicates an expected call of DeleteGitHubOrganization.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteGitHubOrganization(ctx, projectSFID, githubOrgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitHubOrganization", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteGitHubOrganization), ctx, projectSFID, githubOrgName)
}

// DeleteGitHubOrganizationByParent mocks base method.
func (m *MockRepositoryInterface) DeleteGitHubOrganizationByParent(ctx context.Context, parentProjectSFID, githubOrgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitHubOrganizationByParent", ctx, parentProjectSFID, githubOrgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGitHubOrganizationByParent indicates an expected call of DeleteGitHubOrganizationByParent.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteGitHubOrganizationByParent(ctx, parentProjectSFID, githubOrgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitHubOrganizationByParent", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteGitHubOrganizationByParent), ctx, parentProjectSFID, githubOrgName)
}

// GetGitHubOrganization mocks base method.
func (m *MockRepositoryInterface) GetGitHubOrganization(ctx context.Context, githubOrganizationName string) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganization", ctx, githubOrganizationName)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubOrganization indicates an expected call of GetGitHubOrganization.
func (mr *MockRepositoryInterfaceMockRecorder) GetGitHubOrganization(ctx, githubOrganizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganization", reflect.TypeOf((*MockRepositoryInterface)(nil).GetGitHubOrganization), ctx, githubOrganizationName)
}

// GetGitHubOrganizationByName mocks base method.
func (m *MockRepositoryInterface) GetGitHubOrganizationByName(ctx context.Context, githubOrganizationName string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizationByName", ctx, githubOrganizationName)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubOrganizationByName indicates an expected call of GetGitHubOrganizationByName.
func (mr *MockRepositoryInterfaceMockRecorder) GetGitHubOrganizationByName(ctx, githubOrganizationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizationByName", reflect.TypeOf((*MockRepositoryInterface)(nil).GetGitHubOrganizationByName), ctx, githubOrganizationName)
}

// GetGitHubOrganizations mocks base method.
func (m *MockRepositoryInterface) GetGitHubOrganizations(ctx context.Context, projectSFID string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizations", ctx, projectSFID)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubOrganizations indicates an expected call of GetGitHubOrganizations.
func (mr *MockRepositoryInterfaceMockRecorder) GetGitHubOrganizations(ctx, projectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizations", reflect.TypeOf((*MockRepositoryInterface)(nil).GetGitHubOrganizations), ctx, projectSFID)
}

// GetGitHubOrganizationsByParent mocks base method.
func (m *MockRepositoryInterface) GetGitHubOrganizationsByParent(ctx context.Context, parentProjectSFID string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizationsByParent", ctx, parentProjectSFID)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitHubOrganizationsByParent indicates an expected call of GetGitHubOrganizationsByParent.
func (mr *MockRepositoryInterfaceMockRecorder) GetGitHubOrganizationsByParent(ctx, parentProjectSFID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizationsByParent", reflect.TypeOf((*MockRepositoryInterface)(nil).GetGitHubOrganizationsByParent), ctx, parentProjectSFID)
}

// UpdateGitHubOrganization mocks base method.
func (m *MockRepositoryInterface) UpdateGitHubOrganization(ctx context.Context, projectSFID, organizationName string, autoEnabled bool, autoEnabledClaGroupID string, branchProtectionEnabled bool, enabled *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGitHubOrganization", ctx, projectSFID, organizationName, autoEnabled, autoEnabledClaGroupID, branchProtectionEnabled, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGitHubOrganization indicates an expected call of UpdateGitHubOrganization.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateGitHubOrganization(ctx, projectSFID, organizationName, autoEnabled, autoEnabledClaGroupID, branchProtectionEnabled, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGitHubOrganization", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateGitHubOrganization), ctx, projectSFID, organizationName, autoEnabled, autoEnabledClaGroupID, branchProtectionEnabled, enabled)
}
