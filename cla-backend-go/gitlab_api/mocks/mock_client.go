// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_gitlab is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gitlab "github.com/xanzy/go-gitlab"
)

// MockGitLabClient is a mock of GitLabClient interface.
type MockGitLabClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabClientMockRecorder
}

// MockGitLabClientMockRecorder is the mock recorder for MockGitLabClient.
type MockGitLabClientMockRecorder struct {
	mock *MockGitLabClient
}

// NewMockGitLabClient creates a new mock instance.
func NewMockGitLabClient(ctrl *gomock.Controller) *MockGitLabClient {
	mock := &MockGitLabClient{ctrl: ctrl}
	mock.recorder = &MockGitLabClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabClient) EXPECT() *MockGitLabClientMockRecorder {
	return m.recorder
}

// GetMergeRequestCommits mocks base method.
func (m *MockGitLabClient) GetMergeRequestCommits(projectID, mergeID int, opts *gitlab.GetMergeRequestCommitsOptions) ([]*gitlab.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergeRequestCommits", projectID, mergeID, opts)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeRequestCommits indicates an expected call of GetMergeRequestCommits.
func (mr *MockGitLabClientMockRecorder) GetMergeRequestCommits(projectID, mergeID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestCommits", reflect.TypeOf((*MockGitLabClient)(nil).GetMergeRequestCommits), projectID, mergeID, opts)
}

// ListUsers mocks base method.
func (m *MockGitLabClient) ListUsers(opts *gitlab.ListUsersOptions) ([]*gitlab.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", opts)
	ret0, _ := ret[0].([]*gitlab.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGitLabClientMockRecorder) ListUsers(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGitLabClient)(nil).ListUsers), opts)
}

// SetCommitStatus mocks base method.
func (m *MockGitLabClient) SetCommitStatus(projectID int, commitSHA string, opts *gitlab.SetCommitStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommitStatus", projectID, commitSHA, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommitStatus indicates an expected call of SetCommitStatus.
func (mr *MockGitLabClientMockRecorder) SetCommitStatus(projectID, commitSHA, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStatus", reflect.TypeOf((*MockGitLabClient)(nil).SetCommitStatus), projectID, commitSHA, opts)
}
