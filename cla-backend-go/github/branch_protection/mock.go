// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linuxfoundation/easycla/cla-backend-go/github/branch_protection (interfaces: CombinedRepository)

// Package branch_protection is a generated GoMock package.
package branch_protection

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v37/github"
	githubv4 "github.com/shurcooL/githubv4"
)

// MockCombinedRepository is a mock of CombinedRepository interface
type MockCombinedRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCombinedRepositoryMockRecorder
}

// MockCombinedRepositoryMockRecorder is the mock recorder for MockCombinedRepository
type MockCombinedRepositoryMockRecorder struct {
	mock *MockCombinedRepository
}

// NewMockCombinedRepository creates a new mock instance
func NewMockCombinedRepository(ctrl *gomock.Controller) *MockCombinedRepository {
	mock := &MockCombinedRepository{ctrl: ctrl}
	mock.recorder = &MockCombinedRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCombinedRepository) EXPECT() *MockCombinedRepositoryMockRecorder {
	return m.recorder
}

// CreateBranchProtection mocks base method
func (m *MockCombinedRepository) CreateBranchProtection(arg0 context.Context, arg1 *githubv4.CreateBranchProtectionRuleInput) (*CreateRepoBranchProtectionMutation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranchProtection", arg0, arg1)
	ret0, _ := ret[0].(*CreateRepoBranchProtectionMutation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranchProtection indicates an expected call of CreateBranchProtection
func (mr *MockCombinedRepositoryMockRecorder) CreateBranchProtection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchProtection", reflect.TypeOf((*MockCombinedRepository)(nil).CreateBranchProtection), arg0, arg1)
}

// Get mocks base method
func (m *MockCombinedRepository) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockCombinedRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCombinedRepository)(nil).Get), arg0, arg1, arg2)
}

// GetRepositoryBranchProtections mocks base method
func (m *MockCombinedRepository) GetRepositoryBranchProtections(arg0 context.Context, arg1, arg2 string) (*RepoBranchProtectionQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryBranchProtections", arg0, arg1, arg2)
	ret0, _ := ret[0].(*RepoBranchProtectionQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryBranchProtections indicates an expected call of GetRepositoryBranchProtections
func (mr *MockCombinedRepositoryMockRecorder) GetRepositoryBranchProtections(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryBranchProtections", reflect.TypeOf((*MockCombinedRepository)(nil).GetRepositoryBranchProtections), arg0, arg1, arg2)
}

// GetRepositoryIDFromName mocks base method
func (m *MockCombinedRepository) GetRepositoryIDFromName(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryIDFromName", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryIDFromName indicates an expected call of GetRepositoryIDFromName
func (mr *MockCombinedRepositoryMockRecorder) GetRepositoryIDFromName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryIDFromName", reflect.TypeOf((*MockCombinedRepository)(nil).GetRepositoryIDFromName), arg0, arg1, arg2)
}

// ListByOrg mocks base method
func (m *MockCombinedRepository) ListByOrg(arg0 context.Context, arg1 string, arg2 *github.RepositoryListByOrgOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg
func (mr *MockCombinedRepositoryMockRecorder) ListByOrg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockCombinedRepository)(nil).ListByOrg), arg0, arg1, arg2)
}

// UpdateBranchProtection mocks base method
func (m *MockCombinedRepository) UpdateBranchProtection(arg0 context.Context, arg1 *githubv4.UpdateBranchProtectionRuleInput) (*UpdateRepoBranchProtectionMutation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchProtection", arg0, arg1)
	ret0, _ := ret[0].(*UpdateRepoBranchProtectionMutation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranchProtection indicates an expected call of UpdateBranchProtection
func (mr *MockCombinedRepositoryMockRecorder) UpdateBranchProtection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchProtection", reflect.TypeOf((*MockCombinedRepository)(nil).UpdateBranchProtection), arg0, arg1)
}
